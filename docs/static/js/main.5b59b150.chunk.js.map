{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","src","alt","onClick","window","location","reload","Component","serviceWorker","register","navigator","addEventListener","then","registration","console","log","scope","event","data","type","onupdatefound","installingWorker","installing","onstatechange","state","controller","element","document","getElementsByClassName","classList","remove","add","error","catch","ReactDOM","render","src_App_0","getElementById"],"mappings":"yNAwBeA,0LAnBX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,UAAUC,IAAI,cAEzBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gFAAf,gCAEEH,EAAAC,EAAAC,cAAA,QACEI,QAAS,kBAAMC,OAAOC,SAASC,UAC/BN,UAAU,kCAFZ,yBATQO,cC4DH,IAAAC,EAAA,CACbC,SAhEF,WACM,kBAAmBC,WAGrBN,OAAOO,iBAAiB,OAAQ,WAC9BD,UAAUF,cACPC,SAAS,SACTG,KAAK,SAAAC,GACJC,QAAQC,IACN,qDACAF,EAAaG,OAEfN,UAAUF,cAAcG,iBAAiB,UAAW,SAAAM,GAC1B,gBAApBA,EAAMC,KAAKC,OACbL,QAAQC,IACN,4DAEFX,OAAOC,SAASC,YAIpBO,EAAaO,cAAgB,WAE3B,IAAMC,EAAmBR,EAAaS,WAEtCD,EAAiBE,cAAgB,WAC/B,OAAQF,EAAiBG,OACvB,IAAK,YACH,GAAId,UAAUF,cAAciB,WAAY,CAKtCX,QAAQC,IAAI,wCACZ,IAAMW,EAAUC,SAASC,uBACvB,eAEFF,EAAQ,GAAGG,UAAUC,OAAO,UAC5BJ,EAAQ,GAAGG,UAAUE,IAAI,cAIzBjB,QAAQC,IAAI,qCAEd,MACF,IAAK,YACHD,QAAQkB,MACN,wDASXC,MAAM,SAAAD,GAAK,OACVlB,QAAQC,IAAI,4CAA6CiB,SCnDnEE,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAAST,SAASU,eAAe,SAEjD7B,EAAcC","file":"static/js/main.5b59b150.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"h-screen bg-green-lightest\">\n          <img src=\"dog.jpg\" alt=\"a sample\" />\n        </div>\n        <div className=\"App-refresh hidden text-white bg-grey-darkest p-4 absolute rounded shadow-lg\">\n          New version of App available.\n          <span\n            onClick={() => window.location.reload()}\n            className=\"text-blue-light cursor-pointer\"\n          >\n            &nbsp; REFRESH\n          </span>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","function register() {\n  if ('serviceWorker' in navigator) {\n    // Delay the service worker registration until the page has loaded to avoid performance\n    // degradation caused by precaching requests for first time visit.\n    window.addEventListener('load', () => {\n      navigator.serviceWorker\n        .register('SW.js')\n        .then(registration => {\n          console.log(\n            'Service worker registration successful, scope is: ',\n            registration.scope\n          )\n          navigator.serviceWorker.addEventListener('message', event => {\n            if (event.data.type === 'RELOAD_PAGE') {\n              console.log(\n                'Reload page event received from service worker at client'\n              )\n              window.location.reload()\n            }\n          })\n          // fired when SW.js changes\n          registration.onupdatefound = () => {\n            // when updatefound event is triggered, registration.installing is set\n            const installingWorker = registration.installing\n\n            installingWorker.onstatechange = () => {\n              switch (installingWorker.state) {\n                case 'installed':\n                  if (navigator.serviceWorker.controller) {\n                    // At this point, the old content will have been purged and the fresh content will\n                    // have been added to the cache.\n                    // It's the perfect time to display a \"New content is available; please refresh.\"\n                    // message in the page's interface.\n                    console.log('New or updated content is available.')\n                    const element = document.getElementsByClassName(\n                      'App-refresh'\n                    )\n                    element[0].classList.remove('hidden')\n                    element[0].classList.add('block')\n                  } else {\n                    // At this point, everything has been precached.\n                    // It's the perfect time to display a \"Content is cached for offline use.\" message.\n                    console.log('Content is now available offline!')\n                  }\n                  break\n                case 'redundant':\n                  console.error(\n                    'The installing service worker became redundant.'\n                  )\n                  break\n                default:\n                  break\n              }\n            }\n          }\n        })\n        .catch(error =>\n          console.log('Error during service worker registration:', error)\n        )\n    })\n  }\n}\n\nexport default {\n  register,\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.register()\n"],"sourceRoot":""}